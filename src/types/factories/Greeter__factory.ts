/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Greeter, GreeterInterface } from "../Greeter";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "checkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "foo",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "greet",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000da638038062000da6833981810160405281019062000037919062000179565b80600090805190602001906200004f92919062000057565b50506200032e565b828054620000659062000253565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b60006200011e6200011884620001e7565b620001be565b9050828152602081018484840111156200013757600080fd5b620001448482856200021d565b509392505050565b600082601f8301126200015e57600080fd5b81516200017084826020860162000107565b91505092915050565b6000602082840312156200018c57600080fd5b600082015167ffffffffffffffff811115620001a757600080fd5b620001b5848285016200014c565b91505092915050565b6000620001ca620001dd565b9050620001d8828262000289565b919050565b6000604051905090565b600067ffffffffffffffff821115620002055762000204620002ee565b5b62000210826200031d565b9050602081019050919050565b60005b838110156200023d57808201518184015260208101905062000220565b838111156200024d576000848401525b50505050565b600060028204905060018216806200026c57607f821691505b60208210811415620002835762000282620002bf565b5b50919050565b62000294826200031d565b810181811067ffffffffffffffff82111715620002b657620002b5620002ee565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610a68806200033e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a511eb2c1161005b578063a511eb2c146100ea578063b6b55f2514610108578063c71daccb14610124578063cfae3217146101425761007d565b80632e1a7d4d146100825780634c970b2f1461009e578063a4136862146100ce575b600080fd5b61009c6004803603810190610097919061062b565b610160565b005b6100b860048036038101906100b391906105c1565b61029b565b6040516100c591906106e2565b60405180910390f35b6100e860048036038101906100e391906105ea565b61031d565b005b6100f2610337565b6040516100ff9190610744565b60405180910390f35b610122600480360381019061011d919061062b565b610341565b005b61012c6103b3565b6040516101399190610744565b60405180910390f35b61014a6103fa565b60405161015791906106e2565b60405180910390f35b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156101e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d990610704565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610228573d6000803e3d6000fd5b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102789190610827565b9250508190555080600260008282546102919190610827565b9250508190555050565b6060600082136102e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d790610724565b60405180910390fd5b6040518060400160405280600381526020017f466f6f00000000000000000000000000000000000000000000000000000000008152509050919050565b806000908051906020019061033392919061048c565b5050565b6000600254905090565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461039091906107d1565b9250508190555080600260008282546103a991906107d1565b9250508190555050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b606060008054610409906108b1565b80601f0160208091040260200160405190810160405280929190818152602001828054610435906108b1565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b828054610498906108b1565b90600052602060002090601f0160209004810192826104ba5760008555610501565b82601f106104d357805160ff1916838001178555610501565b82800160010185558215610501579182015b828111156105005782518255916020019190600101906104e5565b5b50905061050e9190610512565b5090565b5b8082111561052b576000816000905550600101610513565b5090565b600061054261053d84610784565b61075f565b90508281526020810184848401111561055a57600080fd5b61056584828561086f565b509392505050565b60008135905061057c81610a04565b92915050565b600082601f83011261059357600080fd5b81356105a384826020860161052f565b91505092915050565b6000813590506105bb81610a1b565b92915050565b6000602082840312156105d357600080fd5b60006105e18482850161056d565b91505092915050565b6000602082840312156105fc57600080fd5b600082013567ffffffffffffffff81111561061657600080fd5b61062284828501610582565b91505092915050565b60006020828403121561063d57600080fd5b600061064b848285016105ac565b91505092915050565b600061065f826107b5565b61066981856107c0565b935061067981856020860161087e565b610682816109a1565b840191505092915050565b600061069a6010836107c0565b91506106a5826109b2565b602082019050919050565b60006106bd601a836107c0565b91506106c8826109db565b602082019050919050565b6106dc81610865565b82525050565b600060208201905081810360008301526106fc8184610654565b905092915050565b6000602082019050818103600083015261071d8161068d565b9050919050565b6000602082019050818103600083015261073d816106b0565b9050919050565b600060208201905061075960008301846106d3565b92915050565b600061076961077a565b905061077582826108e3565b919050565b6000604051905090565b600067ffffffffffffffff82111561079f5761079e610972565b5b6107a8826109a1565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006107dc82610865565b91506107e783610865565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561081c5761081b610914565b5b828201905092915050565b600061083282610865565b915061083d83610865565b9250828210156108505761084f610914565b5b828203905092915050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561089c578082015181840152602081019050610881565b838111156108ab576000848401525b50505050565b600060028204905060018216806108c957607f821691505b602082108114156108dd576108dc610943565b5b50919050565b6108ec826109a1565b810181811067ffffffffffffffff8211171561090b5761090a610972565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f7420456e6f756768206d6f6e657900000000000000000000000000000000600082015250565b7f4e6f74206e65676174697665206f72207a65726f2076616c7565000000000000600082015250565b610a0d8161085b565b8114610a1857600080fd5b50565b610a2481610865565b8114610a2f57600080fd5b5056fea264697066735822122068f11a0cfb2b1d3bb247c502303bcb78b011924841f8aeab7761722e77f93e7464736f6c63430008040033";

export class Greeter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Greeter> {
    return super.deploy(_greeting, overrides || {}) as Promise<Greeter>;
  }
  getDeployTransaction(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_greeting, overrides || {});
  }
  attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
